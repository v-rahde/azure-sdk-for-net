// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.ServiceBus
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for RulesOperations.
    /// </summary>
    public static partial class RulesOperationsExtensions
    {
            /// <summary>
            /// List all the rules
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace name.
            /// </param>
            /// <param name='topicName'>
            /// The topic name.
            /// </param>
            /// <param name='subscriptionName'>
            /// Subscription name to fetch Rules created
            /// </param>
            public static IPage<RuleResource> ListAll(this IRulesOperations operations, string resourceGroupName, string namespaceName, string topicName, string subscriptionName)
            {
                return Task.Factory.StartNew(s => ((IRulesOperations)s).ListAllAsync(resourceGroupName, namespaceName, topicName, subscriptionName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all the rules
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace name.
            /// </param>
            /// <param name='topicName'>
            /// The topic name.
            /// </param>
            /// <param name='subscriptionName'>
            /// Subscription name to fetch Rules created
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RuleResource>> ListAllAsync(this IRulesOperations operations, string resourceGroupName, string namespaceName, string topicName, string subscriptionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAllWithHttpMessagesAsync(resourceGroupName, namespaceName, topicName, subscriptionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new rule
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace name.
            /// </param>
            /// <param name='topicName'>
            /// The topicName name.
            /// </param>
            /// <param name='subscriptionName'>
            /// The subscriptionName name.
            /// </param>
            /// <param name='ruleName'>
            /// The rule name.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to create a rule.
            /// </param>
            public static RuleResource CreateOrUpdate(this IRulesOperations operations, string resourceGroupName, string namespaceName, string topicName, string subscriptionName, string ruleName, RuleCreateOrUpdateParameters parameters)
            {
                return Task.Factory.StartNew(s => ((IRulesOperations)s).CreateOrUpdateAsync(resourceGroupName, namespaceName, topicName, subscriptionName, ruleName, parameters), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new rule
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace name.
            /// </param>
            /// <param name='topicName'>
            /// The topicName name.
            /// </param>
            /// <param name='subscriptionName'>
            /// The subscriptionName name.
            /// </param>
            /// <param name='ruleName'>
            /// The rule name.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to create a rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RuleResource> CreateOrUpdateAsync(this IRulesOperations operations, string resourceGroupName, string namespaceName, string topicName, string subscriptionName, string ruleName, RuleCreateOrUpdateParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, namespaceName, topicName, subscriptionName, ruleName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace name.
            /// </param>
            /// <param name='topicName'>
            /// The topic name.
            /// </param>
            /// <param name='subscriptionName'>
            /// The subscription name.
            /// </param>
            /// <param name='ruleName'>
            /// The rule name.
            /// </param>
            public static void Delete(this IRulesOperations operations, string resourceGroupName, string namespaceName, string topicName, string subscriptionName, string ruleName)
            {
                Task.Factory.StartNew(s => ((IRulesOperations)s).DeleteAsync(resourceGroupName, namespaceName, topicName, subscriptionName, ruleName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace name.
            /// </param>
            /// <param name='topicName'>
            /// The topic name.
            /// </param>
            /// <param name='subscriptionName'>
            /// The subscription name.
            /// </param>
            /// <param name='ruleName'>
            /// The rule name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IRulesOperations operations, string resourceGroupName, string namespaceName, string topicName, string subscriptionName, string ruleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteWithHttpMessagesAsync(resourceGroupName, namespaceName, topicName, subscriptionName, ruleName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Retrieves the description for the specified rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace name.
            /// </param>
            /// <param name='topicName'>
            /// The topic name.
            /// </param>
            /// <param name='subscriptionName'>
            /// The subscription name.
            /// </param>
            /// <param name='ruleName'>
            /// The rule name.
            /// </param>
            public static RuleResource Get(this IRulesOperations operations, string resourceGroupName, string namespaceName, string topicName, string subscriptionName, string ruleName)
            {
                return Task.Factory.StartNew(s => ((IRulesOperations)s).GetAsync(resourceGroupName, namespaceName, topicName, subscriptionName, ruleName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the description for the specified rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace name.
            /// </param>
            /// <param name='topicName'>
            /// The topic name.
            /// </param>
            /// <param name='subscriptionName'>
            /// The subscription name.
            /// </param>
            /// <param name='ruleName'>
            /// The rule name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RuleResource> GetAsync(this IRulesOperations operations, string resourceGroupName, string namespaceName, string topicName, string subscriptionName, string ruleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, namespaceName, topicName, subscriptionName, ruleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all the rules
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<RuleResource> ListAllNext(this IRulesOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IRulesOperations)s).ListAllNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all the rules
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RuleResource>> ListAllNextAsync(this IRulesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAllNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
